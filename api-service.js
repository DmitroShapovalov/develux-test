const axios = require("axios");const FormData = require("form-data");function handleError(error, message) {    if (error.response) {        throw new Error(`${message}: ${error.response.status} - ${JSON.stringify(error.response.data)}`);    } else if (error.request) {        throw new Error(`${message}: ${error.request}`);    } else {        throw new Error(`${message}: ${error.message}`);    }}async function getPackageJson(packageName, packageVersion, repoSlug, apiToken) {    const packageJsonUrl = `https://api.bitbucket.org/2.0/repositories/${repoSlug}/src/master/package.json`;    const errorMessage = 'Could not get package.json';    const packageJsonResponse = await axios.get(packageJsonUrl, {        headers: {            'Authorization': apiToken,        }    }).catch(error => handleError(error, errorMessage));    return packageJsonResponse.data;}async function getBranchHash(branchName, repoSlug, apiToken) {    const errorMessage = 'Could not get branch hash';    const branchUrl = `https://api.bitbucket.org/2.0/repositories/${repoSlug}/refs/branches/${branchName}`;    const branchResponse = await axios.get(branchUrl, {        headers: {            'Authorization': apiToken,            'Accept': 'application/json',        }    }).catch(error => handleError(error, errorMessage));    return branchResponse.data.target.hash;}async function createNewBranch(branchName, targetBranchHash, repoSlug, apiToken) {    const errorMessage = 'Could not create new branch';    const newBranchUrl = `https://api.bitbucket.org/2.0/repositories/${repoSlug}/refs/branches`;    await axios.post(newBranchUrl, {        name: branchName,        target: {            hash: targetBranchHash        }    }, {        headers: {            'Authorization': apiToken,            'Accept': 'application/json',        }    }).catch(error => handleError(error, errorMessage));}async function openPullRequest(packageName, packageVersion, currentBranchName, newBranchName, repoSlug, apiToken) {    const errorMessage = 'Could not open pull request';    const pullRequestUrl = `https://api.bitbucket.org/2.0/repositories/${repoSlug}/pullrequests`;    const pullRequestBody = {        title: `Update ${packageName} to ${packageVersion}`,        source: {            branch: {                name: newBranchName            }        },        destination: {            branch: {                name: currentBranchName            }        },        description: `Update the ${packageName} dependency to version ${packageVersion}`    };    await axios.post(pullRequestUrl, pullRequestBody, {        headers: {            'Authorization': apiToken,            'Accept': 'application/json',        }    }).catch(error => handleError(error, errorMessage));}async function uploadDependenciesFile(message, updatedPackageJsonString, branch, repoSlug, apiToken) {    const errorMessage = 'Could not upload dependencies file';    const form = new FormData();    form.append('message', message);    form.append('package.json', updatedPackageJsonString);    form.append('branch', branch);    const uploadUrl = `https://api.bitbucket.org/2.0/repositories/${repoSlug}/src`;    const headers = {        ...form.getHeaders(),        'Authorization': apiToken,    }    await axios.post(uploadUrl, form, {headers})        .catch(error => handleError(error, errorMessage));}module.exports = {    getPackageJson,    getBranchHash,    createNewBranch,    openPullRequest,    uploadDependenciesFile,}