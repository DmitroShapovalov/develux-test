const axios = require('axios');const FormData = require('form-data');const packageName = 'rxjs';const packageVersion = '7.8.1';const branchName = 'master';const repoSlug = 'd-shapovalov/test-data';const apiToken = 'Bearer ATCTT3xFfGN0oCtgRVYaatp1wLMyGGiU1KAb--7Rdeps1yi2kvk5G6vuBJ_2N0nz84AzVNYXGvnTZlmSLcd_op5xNMbmcZFwVP8ohoPSh8vLWJKuOCn2UEk-x5WOPWCeSDOO_C_yaqjBcAtxcFnFfvUs4Pg3VAHKO3fGy6gZ-Q-HcYLrF_ZKEfk=313C5F36';const auth = {    // username: 'dmytro.shapovalov27@gmail.com',    // password: 'crybaby1986'};async function getPackageJson(packageName, packageVersion) {    const packageJsonUrl = `https://api.bitbucket.org/2.0/repositories/${repoSlug}/src/master/package.json`;    const packageJsonResponse = await axios.get(packageJsonUrl, {        headers: {            'Authorization': apiToken,        }    });    return packageJsonResponse.data;}//Upload the updated package.json to the repositoryasync function uploadDependenciesFile(packageName, packageVersion, updatedPackageJsonString) {    const form = new FormData();    form.append('message', `Update ${packageName} to ${packageVersion}`);    form.append('package.json', updatedPackageJsonString);    const uploadUrl = `https://api.bitbucket.org/2.0/repositories/${repoSlug}/src`;    const headers = {        ...form.getHeaders(),        'Authorization': apiToken,    }    await axios.post(uploadUrl, form, {headers});}async function getBranchHash(branch) {    const branchUrl = `https://api.bitbucket.org/2.0/repositories/${repoSlug}/refs/branches/master`;    const branchResponse = await axios.get(branchUrl, {        headers: {            'Authorization': apiToken,            'Accept': 'application/json',        }    });    return branchResponse.data.target.hash;}async function createNewBranch(branchName, targetBranchHash) {    const newBranchUrl = `https://api.bitbucket.org/2.0/repositories/${repoSlug}/refs/branches`;    const newBranchResponse = await axios.post(newBranchUrl, {        name: branchName,        target: {            hash: targetBranchHash        }    }, {        headers: {            'Authorization': apiToken,            'Accept': 'application/json',        }    });    return newBranchResponse.data.target.hash;}// Define the function to open a pull requestasync function openPullRequest(packageName, packageVersion, currentBranchName, newBranchName) {    const pullRequestUrl = `https://api.bitbucket.org/2.0/repositories/${repoSlug}/pullrequests`;    const pullRequestBody = {        title: `Update ${packageName} to ${packageVersion}`,        source: {            branch: {                name: newBranchName            }        },        destination: {            branch: {                name: currentBranchName            }        },        description: `Update the ${packageName} dependency to version ${packageVersion}`    };    await axios.post(pullRequestUrl, pullRequestBody, {        headers: {            'Authorization': apiToken,            'Accept': 'application/json',        }    });    console.log(`Pull request for updating ${packageName} to ${packageVersion} created`);}async function main(packageName, packageVersion, currentBranchName) {    // Get the package.json file from the repository    const packageJsonFile = await getPackageJson(packageName, packageVersion);    // Update the package version    packageJsonFile.dependencies[packageName] = packageVersion;    // Convert the updated package.json to a string    //const updatedPackageJsonString = JSON.stringify(packageJson, null, 2);    const currentBranchHash = await getBranchHash(currentBranchName);    //Create a new branch for the pull request    const newBranchName = `update-${packageName}-to-${packageVersion}`;    const newBranchHash = await createNewBranch(newBranchName, currentBranchHash);    console.log('branchHash: ', currentBranchHash);    console.log('newBranchHash: ', newBranchHash);    // Create the pull request    await openPullRequest(packageName, packageVersion, currentBranchName, newBranchName);}main(packageName, packageVersion, branchName);